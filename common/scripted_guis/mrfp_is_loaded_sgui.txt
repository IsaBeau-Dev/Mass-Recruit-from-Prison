mrfp_is_loaded_sgui = {
  scope = character
  is_shown = {
    has_global_variable = mrfp_is_loaded
  }
  effect = {
    mrfp_start_story_if_not_exist = yes

    #save scopes like in story so the scripted effects works
    save_scope_as = the_story_owner 
    root.var:mrfp_story = {
      save_scope_as = the_story
    }
    
    #remove mrfp_blocked_can_ransom flag on every prisoner because in GUI user can block people themself
    every_prisoner = {
      limit = { has_character_flag = mrfp_blocked_can_ransom }
      remove_character_flag = mrfp_blocked_can_ransom
    }

    #Prowess threshold enabled
    if = {
      limit = {
        scope:the_story.var:mrfp_threshold_enabled = yes
        any_prisoner = {
            prowess >= scope:the_story.var:mrfp_prowess_threshold
            is_ruler = no
        }
      }
      every_prisoner = {
        limit = {
            prowess >= scope:the_story.var:mrfp_prowess_threshold
            is_ruler = no
        }
        save_scope_as = the_story_prisoner
        mrfp_is_at_war_with_targets_liege_story = yes

        mrfp_release_all_unblocked_prisoners = yes
      }
    }

    #Prowess threshold disabled
    if = {
      limit = {
        scope:the_story.var:mrfp_threshold_enabled = no
      }
      every_prisoner = {
        limit = {
            is_ruler = no
        }
        save_scope_as = the_story_prisoner
        mrfp_is_at_war_with_targets_liege_story = yes

        mrfp_release_all_unblocked_prisoners = yes
      }
    }

    #temp set var for scripted effect to work (call this regardless because both on/off threshold will do it)
    set_variable = {
      name = mrfp_total_recruited_current
      value = scope:the_story.var:mrfp_total_recruited_current
    }
    mrfp_send_amout_people_released_message = yes
    remove_variable = mrfp_total_recruited_current
    
    scope:the_story = {
      mrfp_update_recruitment_counter = yes
    }
    
    ##old code
    # every_prisoner = {
    #   mrfp_every_prisoner_effect = {
    #     MRFPROOT = root
    #     MRFPTHIS = this
    #   }
    # }
  }
}
mrfp_is_loaded_sgui_ransom = {
  scope = character
  is_shown = {
    has_global_variable = mrfp_is_loaded
  }
  effect = {
    mrfp_start_story_if_not_exist = yes

    #save scopes like in story so the scripted effects works
    save_scope_as = the_story_owner 
    root.var:mrfp_story = {
      save_scope_as = the_story
    }
    every_prisoner = {
      limit = { always = yes }
      save_scope_as = the_story_prisoner
      mrfp_is_at_war_with_target_or_their_liege_story = yes


      scope:the_story_prisoner = {
          save_scope_as = secondary_recipient
          if = {
              limit = {
                  is_ruler = no                
                  exists = liege
              }
              liege = {
                  save_scope_as = the_story_prisoner
              }
          }
      }

      mrfp_release_all_unblocked_ransom_prisoners = yes
    }

    #temp set var for scripted effect to work (call this regardless because both on/off threshold will do it)
    set_variable = {
      name = mrfp_total_ransomed_people_current
      value = scope:the_story.var:mrfp_total_ransomed_people_current
    }
    set_variable = {
      name = mrfp_total_ransomed_gold_current
      value = scope:the_story.var:mrfp_total_ransomed_gold_current
    }
    mrfp_send_amount_people_ransomed_message = yes
    remove_variable = mrfp_total_ransomed_people_current
    remove_variable = mrfp_total_ransomed_gold_current
    
    scope:the_story = {
      mrfp_update_ransom_counter = yes
    }

    #old code
    # every_prisoner = {
    #   mrfp_ransom_every_prisoner_effect = {
    #     MRFPROOT = root
    #     MRFPTHIS = this
    #   }
    # }
  }
}


# torture_interaction
mrfp_is_loaded_sgui_torture = {
  scope = character
  is_shown = {
    has_global_variable = mrfp_is_loaded
  }
  effect = {
    save_scope_as = the_story_owner
    root.var:mrfp_story = {
      save_scope_as = the_story
    }
    every_prisoner = {
      limit = { 
        NOT={ has_character_modifier = recently_tortured }
        NOT={ has_character_flag = mrfp_blocked_gui }
       }
      save_scope_as = the_story_prisoner
      run_interaction = {
        #interaction = ransom_interaction
        interaction = torture_interaction
        actor = scope:the_story_owner
        recipient = scope:the_story_prisoner
        execute_threshold = accept
      }
    }
  }
}
#prison window gui stuff
mrfp_prison_window_ransom = {
  scope = character
  is_shown = {
    scope:target = {
      save_temporary_scope_as = secondary_recipient
      trigger_if = {
          limit = {
              is_ruler = no
              exists = liege
          }
          liege = {
              save_temporary_scope_as = secondary_recipient
          }
      }
    }
    scope:target.ransom_cost_value <= scope:secondary_recipient.gold
  }
}
mrfp_prison_window_recruited = {
  scope = character
  is_shown = {
    is_character_interaction_potentially_accepted = {
      recipient = scope:target
      interaction = mrfp_vars_interaction_story
    }
  }
}
mrfp_prison_window_block_or_unblock_character = {
  scope = character
  effect = {
    if = {
      limit = {
        has_character_flag = mrfp_blocked_gui
      }
      remove_character_flag = mrfp_blocked_gui
    }
    else = {
      add_character_flag = mrfp_blocked_gui
    }
  }
}